bool isBipartite(const std::vector<std::vector<int>>& graph) {
    int n = graph.size();
    std::vector<int> colors(n, -1);  // -1 indicates uncolored, 0 and 1 are the two colors

    for (int start = 0; start < n; ++start) {  // Handle disconnected components
        if (colors[start] == -1) {  // Not colored
            std::queue<int> q;
            q.push(start);
            colors[start] = 0;  // Start coloring with 0

            while (!q.empty()) {
                int u = q.front();
                q.pop();

                for (int v = 0; v < n; ++v) {
                    if (graph[u][v] && colors[v] == -1) {  // Check for an edge and uncolored vertex
                        colors[v] = 1 - colors[u];  // Alternate the color
                        q.push(v);
                    } else if (graph[u][v] && colors[v] == colors[u]) {  // Same color on both ends
                        return false;
                    }
                }
            }
        }
    }

    return true;
}
